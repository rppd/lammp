/*{
	"DESCRIPTION": "",
	"CREDIT": "",
	"ISFVSN": "2",
	"CATEGORIES": ["XXX"],
	"INPUTS": []
}*/

struct state {
  float x;
  float y;
  float t;
};

float x(state s) { return s.x; }
float y(state s) { return s.x; }
float t(state s) { return s.t; }

state scale(state s, float factor) {
  s.x /= factor;
  s.y /= factor;
  return s;
}

state translate(state s, float tx, float ty) {
  s.x -= tx;
  s.y -= ty;
  return s;
}

state rotate(state s, float angle) {
  float sx = s.x;
  float sy = s.y;
  s.x = cos(angle)*sx - sin(angle)*sy;
  s.y = sin(angle)*sx + cos(angle)*sy;
  return s;
}

bool square(state s, float r) {
  return s.x*s.x < r*r && s.y*s.y < r*r;
}

float cos(state s, float x) {
  return cos(x);
}

//STANDARD LIB END


float scalefactor(state s) {
 return 0.100000; 
}

float redcos(state s) {
 return cos(s,x(s)) + 1.000000 / 2.000000; 
}

bool region1(state s) {
 return square(s,0.100000); 
}

bool region2(state s) {
 return region1(scale(s,0.900000)); 
}

bool region3(state s) {
 return region1(s) && !region2(s); 
}

vec4 color1(state s) {
 return vec4(redcos(scale(s,0.010000)),1.000000,1.000000,1.000000); 
}

vec4 color2(state s) {
 return region3(rotate(translate(s,0.200000,0.100000),1.000000)) ? color1(s) : vec4(0.,0.,0.,1.); 
}

vec4 lammp(state s) {
 return color2(s); 
}


//MAIN FUNCTION
void main() {
  state s = state(
    (gl_FragCoord.x - RENDERSIZE.x/2.)/RENDERSIZE.x,
    (gl_FragCoord.y - RENDERSIZE.y/2.)/RENDERSIZE.x,
    TIME
  );

  gl_FragColor = lammp(s);
}
